name: Create and Upload Release Zip

on:
  push:
    tags:
      - 'v*'  # Match tags starting with v
    branches:
      - 'dev'  # Only trigger for tags pushed to the 'dev' branch

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if release exists
        id: check_release
        run: |
          # Check if release with the tag exists by calling GitHub API
          TAG_NAME="${{ github.ref_name }}"
          RESPONSE=$(curl -s --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${TAG_NAME}")
          
          # Check if the response contains the 'id' field (which means the release exists)
          if [[ "$(echo $RESPONSE | jq -r .id)" != "null" ]]; then
            echo "Release with tag $TAG_NAME already exists. Skipping release creation."
            echo "release_exists=true" >> $GITHUB_ENV
          else
            echo "Release with tag $TAG_NAME does not exist. Proceeding with creation."
            echo "release_exists=false" >> $GITHUB_ENV
          fi

      - name: Zip files
        run: |
          zip -r release.zip src  # Replace 'src' with your actual folder name
          ls -lh release.zip  # Check the size of the zip file
        if: env.release_exists == 'false'  # Only run if release doesn't exist

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}  # Use the tag name that triggered the workflow
          release_name: Release ${{ github.ref_name }}
          body: |
            This is an automated release.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: env.release_exists == 'false'  # Only run if release doesn't exist

      - name: Upload Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: release.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: env.release_exists == 'false'  # Only run if release doesn't exist
